name: Deploy Next.js to NAS using Docker

on:
  push:
    branches:
      - main  # 배포를 트리거할 브랜치

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Docker 환경 설정
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # 3. Docker 이미지 빌드
    - name: Build Docker image
      run: |
        docker build -t nextjs-app:latest .

    # 4. Docker 이미지를 tar 파일로 저장
    - name: Save Docker image as tar
      run: docker save nextjs-app:latest > nextjs-app.tar

    # 5. NAS로 Docker 이미지 업로드
    - name: Upload Docker image to NAS
      env:
        NAS_HOST: ${{ secrets.NAS_HOST }}
        NAS_USER: ${{ secrets.NAS_USER }}
        NAS_PORT: ${{ secrets.NAS_PORT }}
        NAS_KEY: ${{ secrets.NAS_KEY }}
      run: |
        echo "${NAS_KEY}" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -P $NAS_PORT nextjs-app.tar $NAS_USER@$NAS_HOST:/var/services/homes/dudnjsckrgo/docker/virtual-front/
        rm -f private_key.pem

    # 6. NAS에서 Docker Compose로 컨테이너 배포
    - name: Deploy Docker container on NAS
      env:
        NAS_HOST: ${{ secrets.NAS_HOST }}
        NAS_USER: ${{ secrets.NAS_USER }}
        NAS_PORT: ${{ secrets.NAS_PORT }}
        NAS_KEY: ${{ secrets.NAS_KEY }}
      run: |
        echo "${NAS_KEY}" > private_key.pem
        chmod 600 private_key.pem
        ssh -i private_key.pem -p $NAS_PORT $NAS_USER@$NAS_HOST << EOF
          export PATH=/usr/local/bin:\$PATH
          cd /var/services/homes/dudnjsckrgo/docker/virtual-front
          
          echo "Loading Docker image..."
          docker load < nextjs-app.tar

          echo "Stopping and removing existing container..."
          docker-compose down || true
          
          echo "Starting new container..."
          docker-compose up -d

          echo "Cleaning up old image tar..."
          rm -f nextjs-app.tar
        EOF
        rm -f private_key.pem
